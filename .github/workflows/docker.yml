name: Build and Push Docker Image

on:
  # Trigger on PR merge to main
  pull_request:
    branches: [main]
    types: [closed]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Run if: PR merged to main OR manually triggered (with force option)
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_dispatch')
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,prefix={{date 'YYYYMMDD'}}-
            type=raw,value=main,enable={{is_default_branch}}
            type=raw,value=stable,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
      
      - name: Verify Docker image and report size
        run: |
          echo "🔍 Verifying built image..."
          # Get the first tag for verification
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $IMAGE_TAG"
          
          # Report image size
          IMAGE_SIZE=$(docker image inspect "$IMAGE_TAG" --format='{{.Size}}' | numfmt --to=iec)
          IMAGE_SIZE_MB=$(docker image inspect "$IMAGE_TAG" --format='{{.Size}}' | awk '{print int($1/1024/1024)}')
          echo "📦 Image size: $IMAGE_SIZE (${IMAGE_SIZE_MB}MB)"
          
          # Basic image inspection
          docker image inspect "$IMAGE_TAG" > /dev/null || {
            echo "❌ Image inspection failed"
            exit 1
          }
          
          # Test if image can start (with timeout)
          timeout 30s docker run --rm "$IMAGE_TAG" node --version || {
            echo "⚠️  Image startup test failed, but continuing..."
          }
          
          echo "✅ Image verification completed"
          
          # Save size for summary
          echo "IMAGE_SIZE=$IMAGE_SIZE" >> $GITHUB_ENV
          echo "IMAGE_SIZE_MB=${IMAGE_SIZE_MB}" >> $GITHUB_ENV
      
      - name: Generate summary
        run: |
          echo "## 🐳 Docker Image Built Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show trigger information
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "**Triggered by:** PR #${{ github.event.pull_request.number }} merge" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "**Triggered by:** Manual workflow dispatch" >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.force_deploy }}" = "true" ]; then
              echo "**Mode:** Force deploy enabled" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "**Image Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Size:** $IMAGE_SIZE ($IMAGE_SIZE_MB MB)" >> $GITHUB_STEP_SUMMARY
          
          # Size optimization status
          if [ "$IMAGE_SIZE_MB" -lt 300 ]; then
            echo "✅ **Size Status:** Optimized (under 300MB)" >> $GITHUB_STEP_SUMMARY
          elif [ "$IMAGE_SIZE_MB" -lt 500 ]; then
            echo "⚠️  **Size Status:** Acceptable (300-500MB)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Size Status:** Large (over 500MB - consider optimization)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Tags Created:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Usage:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          
          # Try to detect port from Dockerfile, fallback to common Node.js ports
          if [ -f "./Dockerfile" ]; then
            PORT=$(grep -o 'EXPOSE [0-9]*' ./Dockerfile | head -n1 | cut -d' ' -f2 || echo "3000")
          else
            PORT="3000"
          fi
          echo "docker run -p \$PORT:\$PORT ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "# Note: Replace \$PORT with your desired port (detected: $PORT)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      
      - name: Cleanup on failure  
        if: failure()
        run: |
          echo "🧹 Cleaning up after build failure..."
          # Clean up any partial images or build cache
          docker system prune -f --filter "until=1h" || true
          echo "✅ Cleanup completed"
